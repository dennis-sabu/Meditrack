<TabsContent value="patient">
                <form className="space-y-4">
                  <div>
                    <Label>Full Name</Label>
                    <div className="flex items-center border rounded-md p-2">
                      <User className="w-4 h-4 text-gray-400 mr-2" />
                      <Input
                        value={signupData.name}
                        onChange={(e) => setSignupData(prev => ({ ...prev, name: e.target.value }))}
                        placeholder="John Doe"
                        className="border-0 focus-visible:ring-0 shadow-none"
                      />
                    </div>
                  </div>
                  <div>
                    <Label>Email</Label>
                    <div className="flex items-center border rounded-md p-2">
                      <Mail className="w-4 h-4 text-gray-400 mr-2" />
                      <Input
                        type="email"
                        value={signupData.email}
                        onChange={(e) => setSignupData(prev => ({ ...prev, email: e.target.value }))}
                        placeholder="patient@example.com"
                        className="border-0 focus-visible:ring-0 shadow-none"
                      />
                    </div>
                  </div>
                  <div>
                    <Label>Phone Number</Label>
                    <div className="flex items-center border rounded-md p-2">
                      <Phone className="w-4 h-4 text-gray-400 mr-2" />
                      <Input
                        value={signupData.phone}
                        onChange={(e) => setSignupData(prev => ({ ...prev, phone: e.target.value }))}
                        placeholder="+1234567890"
                        className="border-0 focus-visible:ring-0 shadow-none"
                      />
                    </div>
                  </div>
                  <div>
                    <Label>Date of Birth</Label>
                    <div className="flex items-center border rounded-md p-2">
                      <Calendar className="w-4 h-4 text-gray-400 mr-2" />
                      <Input
                        type="date"
                        value={signupData.dateOfBirth}
                        onChange={(e) => setSignupData(prev => ({ ...prev, dateOfBirth: e.target.value }))}
                        className="border-0 focus-visible:ring-0 shadow-none"
                      />
                    </div>
                  </div>
                  <div>
                    <Label>Government ID</Label>
                    <div className="flex items-center border rounded-md p-2">
                      <FileBadge className="w-4 h-4 text-gray-400 mr-2" />
                      <Input
                        value={signupData.governmentId}
                        onChange={(e) => setSignupData(prev => ({ ...prev, governmentId: e.target.value }))}
                        placeholder="National ID / SSN"
                        className="border-0 focus-visible:ring-0 shadow-none"
                      />
                    </div>
                  </div>
                  <div>
                    <Label>Password</Label>
                    <div className="flex items-center border rounded-md p-2">
                      <Lock className="w-4 h-4 text-gray-400 mr-2" />
                      <Input
                        type="password"
                        value={signupData.password}
                        onChange={(e) => setSignupData(prev => ({ ...prev, password: e.target.value }))}
                        placeholder="••••••••"
                        className="border-0 focus-visible:ring-0 shadow-none"
                      />
                    </div>
                  </div>
                  <div>
                    <Label>Confirm Password</Label>
                    <div className="flex items-center border rounded-md p-2">
                      <Lock className="w-4 h-4 text-gray-400 mr-2" />
                      <Input
                        type="password"
                        value={signupData.confirmPassword}
                        onChange={(e) => setSignupData(prev => ({ ...prev, confirmPassword: e.target.value }))}
                        placeholder="••••••••"
                        className="border-0 focus-visible:ring-0 shadow-none"
                      />
                    </div>
                  </div>
                  <Button
                    type="button"
                    onClick={async () => {
                      if (signupData.password !== signupData.confirmPassword) {
                        toast.error("Passwords don't match");
                        return;
                      }

                      if (!signupData.name || !signupData.email || !signupData.phone || !signupData.password) {
                        toast.error("Please fill in all required fields");
                        return;
                      }

                      try {
                        const result = await patientRegisterMutation.mutateAsync({
                          name: signupData.name,
                          email: signupData.email,
                          phone: signupData.phone,
                          dateOfBirth: signupData.dateOfBirth,
                          governmentId: signupData.governmentId,
                          password: signupData.password,
                        });

                        if (result.success) {
                          toast.success("Patient registration successful! You can now login.");
                          setMode("login");
                          setSignupData({
                            name: "",
                            email: "",
                            phone: "",
                            dateOfBirth: "",
                            governmentId: "",
                            password: "",
                            confirmPassword: ""
                          });
                        }
                      } catch (error) {
                        toast.error((error as Error).message || "Registration failed");
                      }
                    }}
                    disabled={patientRegisterMutation.isPending}
                    className="w-full bg-blue-600 hover:bg-blue-700 text-white disabled:opacity-50"
                  >
                    <Heart className="w-4 h-4 mr-2" />
                    {patientRegisterMutation.isPending ? "Registering..." : "Sign Up as Patient"}
                  </Button>
                </form>
              </TabsContent>